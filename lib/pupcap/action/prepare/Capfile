require 'net/ssh/multi'

namespace :prepare do
  task :default do
    generate_keys
    try_ssh_copy_id
    run_script
  end

  task :try_ssh_copy_id do
    begin
      ssh_copy_id
    rescue Capistrano::ConnectionError => e
      pass = Capistrano::CLI.password_prompt("SSH Password: ")
      set :password, pass
      ssh_copy_id
    end
  end

  task :ssh_copy_id do
    remote_key_path = "/tmp/#{application}_id.pub.#{Time.now.to_i}"
    upload(provision_key_pub, remote_key_path)
    run("mkdir -p ~/.ssh && chmod 0700 ~/.ssh")
    run("cat #{remote_key_path} >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys")
    run("rm -f #{remote_key_path}")
  end

  task :generate_keys do
    unless File.exists?(provision_key)
      logger.important("Generate keys")
      Pupcap::Command.ensure_local_dir("#{local_root}/.keys", "0700")
      Pupcap::Command.run_local("ssh-keygen -q -b 1024 -t rsa -C \"#{application} provision key\" -f #{provision_key}")
      Pupcap::Command.run_local("chmod 0600 #{provision_key}")
      Pupcap::Command.run_local("chmod 0600 #{provision_key_pub}")
    end
  end

  task :run_script do
    template = pupcap_options[:script]
    prepare_script = ERB.new(File.read template).result(binding)

    set :use_sudo, true

    remote_script_name = "/tmp/pupcap_prepare.sh"
    put(prepare_script, remote_script_name)
    run("chmod 0755 #{remote_script_name}")
    force = ENV['FORCE'] ? "1" : "0"
    hostname = ENV['HOSTNAME'] ? " PUPCAP_HOSTNAME=#{ENV['HOSTNAME']}" : ""
    sudo("env PUPCAP_FORCE=#{force}#{hostname} #{remote_script_name}")
    run("rm #{remote_script_name}")
  end
end
