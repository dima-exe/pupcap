_cset(:pupcap_prepare_script, "/tmp/pupcap_prepare.sh")

namespace :prepare do
  task :default do
    try_ssh_copy_id
    script
  end

  task :try_ssh_copy_id do
    begin
      ssh_copy_id
    rescue Capistrano::ConnectionError => e
      pass = Capistrano::CLI.password_prompt("SSH Password: ")
      set :password, pass
      ssh_copy_id
    end
  end

  task :ssh_copy_id do
    key_content = File.read(provision_key_pub).strip
    content = capture("test -d ~/.ssh && cat ~/.ssh/authorized_keys || echo")

    unless content.include?(key_content)
      remote_key_path = "/tmp/#{application}_id.pub.#{Time.now.to_i}"
      put(key_content, remote_key_path)
      run <<-EOF.compact
      mkdir -p ~/.ssh && chmod 0700 ~/.ssh ;
      cat #{remote_key_path} >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys ;
      rm -f #{remote_key_path}
      EOF
    end
  end

  task :script do
    template = pupcap_options[:script]
    content = ERB.new(File.read template).result(binding)

    put(content, pupcap_prepare_script)
    run("chmod 0700 #{pupcap_prepare_script}")
    force = ENV['FORCE'] ? "1" : "0"
    run("#{sudo} env PUPCAP_FORCE=#{force} #{pupcap_prepare_script}; rm -f #{pupcap_prepare_script}")
  end
end
